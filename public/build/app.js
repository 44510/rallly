angular.module("rallly",["ui.router","ngResource","btford.modal","ngTagsInput","ngAnimate"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){n.html5Mode(!0),t.otherwise("/notfound"),e.state("index",{url:"/",templateUrl:"templates/home.html",controller:"HomeCtrl"}).state("newevent",{url:"/new",templateUrl:"templates/newEvent/layout.html",controller:"NewEventCtrl"}).state("newevent.general",{templateUrl:"templates/newEvent/general.html"}).state("newevent.datetime",{templateUrl:"templates/newEvent/datetime.html"}).state("newevent.invite",{templateUrl:"templates/newEvent/invite.html"}).state("newevent.success",{templateUrl:"templates/newEvent/success.html"}).state("about",{url:"/about",templateUrl:"templates/about.html",controller:"AboutCtrl"}).state("notfound",{url:"/notfound",templateUrl:"templates/notfound.html"}).state("event",{url:"/:id",templateUrl:"templates/event.html",controller:"EventCtrl"}).state("editevent",{url:"/:id/edit",templateUrl:"templates/editevent.html",controller:"EditEventCtrl"}).state("verifyevent",{url:"/verify/:id/code/:code",controller:"VerificationCtrl"}).state("deleteevent",{url:"/delete/:id/code/:code",controller:"DeletionCtrl"})}]).factory("Event",["$resource",function(e){return e("/api/event/:id",{id:"@_id"},{update:{method:"PUT"},verify:{method:"GET",url:"/api/event/:id/code/:code"},destroy:{method:"DELETE",url:"/api/event/:id/code/:code"}})}]).factory("Participant",["$resource",function(e){return e("/api/event/:id/participant/:pid",{id:"@_id"},{update:{method:"PUT"}})}]).factory("Comment",["$resource",function(e){return e("/api/event/:id/comment/:cid",{id:"@_id"},{update:{method:"PUT"}})}]).factory("Title",function(){return{set:function(e){document.title=e}}}),angular.module("rallly").run(["$templateCache",function(e){e.put("templates/about.html",'<div style="max-width:600px">\n    <h1>What is Rallly?</h1>\n    <div class="rl-page-desc">Rallly is a collaborative scheduling service that makes deciding on a date fast and easy.</div>\n    <h2>Hi, I\'m Luke!</h2>\n    <p>\n        I created Rallly as side project to help me learn some new technologies. I decided to publish it because I thought other people might find it useful. Rallly is a completely free service. In fact it is even open source. You can look at the latest source code on Github.\n    </p>\n</div>\n'),e.put("templates/confirmmodal.html",'<div class="rl-modal-overlay" ng-click="modal.cancel()"></div>\n\n<div class="rl-modal">\n    <div class="rl-modal-title">{{modal.title}}</div>\n    <div class="rl-modal-message">\n        {{modal.message}}\n    </div>\n    <div class="rl-modal-actions">\n        <button type="button" ng-click="modal.confirm()" ng-show="modal.confirm" class="btn" ng-class="{danger : modal.isDestructive}">{{modal.confirmText}}</button>\n        <button type="button" ng-click="modal.cancel()"  class="btn">{{modal.cancelText}}</button>\n    </div>\n</div>\n'),e.put("templates/editevent.html",'<div ng-show="event._id">\n    <div class="box">\n\n        <div class="box-title">Edit Event</div>\n        <div class="box-description">\n            You can makes changes to your existing event by changing the fields in the form below.\n        </div>\n\n        <form novalidate name="form" ng-submit="submit()">\n\n            <section class="box-section" user-form form="form" event="event">\n\n            </section>\n\n            <section class="box-section" event-form form="form" event="event">\n\n            </section>\n            <section class="box-section" date-form form="form" event="event">\n\n            </section>\n\n            <section class="box-section" settings-form form="form" event="event">\n\n            </section>\n\n            <div class="box-controls box-bottom-sticky">\n                <button type="submit" ng-show="didChange()" class="btn btn-primary" ng-class="{disabled : !didChange()}">\n                    Save Changes\n                </button>\n                <button type="button" ng-click="undoChanges()" class="btn" ng-show="didChange()">Undo Changes</button>\n                <a href="/{{event._id}}" class="btn" ng-hide="didChange()">Done</a>\n            </div>\n\n        </form>\n\n    </div>\n\n</div>\n'),e.put("templates/event.html",'<div ng-show="event._id && !event.isDeleted">\n    <div class="box ">\n        <div class="event-header">\n            <div class="details">\n                <div class="title">\n                    {{event.title}}\n                    <span class="title-label danger" ng-show="event.isClosed">Poll Closed</span>\n                    <span class="title-label success" ng-hide="event.isClosed">Poll Open</span>\n                </div>\n                <div class="subtitle">\n                    Created by <a href="mailto:{{event.creator.email}}">{{event.creator.name}}</a> &bull; {{event.created | elapsed}}\n                </div>\n            </div>\n            <div class="actions">\n                <button class="btn" ng-click="editEvent()">Edit Event</button>\n            </div>\n        </div>\n        <div class="box-side-sticky event-description" ng-show="event.description">{{event.description}}</div>\n        <div class="box-bottom-sticky event-location" ng-show="event.location">\n            <img src="/images/location.png" width="18" /><a href="http://google.com/maps?q={{event.location}}" target="_blank">{{event.location}}</a>\n        </div>\n\n    </div>\n    <div class="box box-x-scroll">\n        <div poll event="event" class="poll">\n        </div>\n    </div>\n\n    <div class="box" ng-hide="event.comments.length == 0 && event.isClosed">\n        <div class="box-title">\n            Discussion\n        </div>\n        <div class="box-description">\n            You can discuss the event with your friends by leaving a comment below.\n        </div>\n        <div discussion event="event">\n\n        </div>\n    </div>\n</div>\n'),e.put("templates/home.html",'<div class="page-placeholder">\n    <div class="image">\n        <img src="/images/mark_large.png" width="67" />\n    </div>\n    <div class="title">\n        Schedule an Event\n    </div>\n    <div class="content">\n        Want to host an event but canâ€™t decide on a date? Click on the button below to start!\n    </div>\n    <button ng-click="newEvent()" class="btn">Schedule New Event</button>\n</div>\n'),e.put("templates/newevent.html",'<div ng-if="!eventUrl">\n    <div class="box" ng-class="{\'animated shake\': form.$submitted && form.$invalid }">\n\n        <div class="box-title">Schedule a New Event</div>\n        <div class="box-description">\n            Fill in the form below to create your event and share it with your friends and colleagues.\n        </div>\n\n        <form novalidate autocomplete="off" name="form" ng-submit="submit()">\n            <div ng-if="page == 1">\n\n                <section class="box-section" user-form form="form" event="event">\n\n                </section>\n\n                <section class="box-section" event-form form="form" event="event">\n\n                </section>\n            </div>\n            <div ng-if="page==2">\n\n                <section class="box-section" date-form form="form" event="event">\n\n                </section>\n\n                <section class="box-section" ng-show="event.dates.length" time-form form="form" event="event">\n\n                </section>\n            </div>\n\n            <div ng-if="page==3">\n\n            <section class="box-section" participants-form form="form" event="event">\n\n            </section>\n\n            </div>\n\n\n            <div class="box-controls box-bottom-sticky">\n                <button type="button" ng-if="page!=1" class="btn" ng-click="prevPage()">Back</button>\n                <button type="button" ng-if="page!=3" class="btn" ng-click="nextPage()">Next</button>\n                <button type="submit" ng-if="page==3" class="btn btn-primary">Create Event</button>\n            </div>\n\n        </form>\n    </div>\n\n</div>\n<div ng-if="eventUrl" class="box">\n    <div class="box-message">\n            <div class="main-image">\n                <img src="/images/success_large.png" width="100" />\n            </div>\n    <div class="title">Event Created</div>\n    <div class="content">\n        Your event has been created successfully! You should receive an email shortly with instructions to verify your email address.\n    </div>\n    <div class="mini-divider">\n    </div>\n    <div class="form-group">\n        <input type="text" class="form-control" disabled="true" value="{{eventUrl}}" />\n        <a href="{{eventUrl}}" class="btn form-btn">GO</a>\n    </div>\n    </div>\n</div>\n'),e.put("templates/notfound.html","<h1>Error 404</h1>\n<h2>Not Found</h2>\n"),e.put("templates/notification.html",'<div class="notification {{notification.type}}" ng-click="notification.close()">\n    <div class="title">\n        {{notification.title}}\n    </div>\n    <div class="message">\n        {{notification.message}}\n    </div>\n</div>\n'),e.put("templates/directives/discussion.html",'<ul class="comment-thread" ng-show="event.comments.length">\n    <li ng-repeat="comment in event.comments" class="comment">\n        <div class="avatar-section">\n            <img src="/images/avatar.png" />\n        </div>\n        <div class="comment-section">\n            <a href="#" class="comment-delete" ng-click="deleteComment(comment)">&times;</a>\n            <div class="meta">\n                <span class="name">{{comment.author.name}}</span>\n                <span class="time">{{comment.created | elapsed}}</span>\n            </div>\n            <div class="content">{{comment.content}}</div>\n        </div>\n    </li>\n</ul>\n<form novalidate ng-submit="postComment()" name="commentForm" class="comment-form">\n    <div class="avatar-section">\n        <img src="/images/avatar.png" />\n    </div>\n    <div class="input-section form-group">\n        <div class="content-section">\n            <textarea class="form-control" required ng-model="comment.content" placeholder="Write a comment..."></textarea>\n        </div>\n        <div class="name-section">\n            <div class="name-container">\n                <input type="text" class="form-control" required placeholder="Your Name" ng-model="comment.author.name" />\n                <button type="submit" class="btn">Post Comment</button>\n                <span class="form-error" ng-show="commentForm.$submitted && commentForm.$error">\n                    <img src="/images/error.png" width="14" /> Make sure you fill in all the fields.\n                </span>\n            </div>\n        </div>\n    </div>\n</form>\n'),e.put("templates/directives/poll.html",'<div class="poll-header">\n    <div class="header participants-header">\n        {{event.participants.length}} participants\n    </div>\n    <div class="header date-header" ng-repeat="d in event.dates">\n        <div class="daticon">\n            <div class="dow">\n                {{d.date | date: \'EEE\'}}\n            </div>\n            <div class="day">\n                {{d.date | date: \'d\'}}\n            </div>\n            <div class="month">\n                {{d.date | date : \'MMM\'}}\n            </div>\n            <span class="count" ng-show="selectedDate($index)" ng-class={top:isTopDate($index)}>{{selectedDate($index)}}</span>\n        </div>\n    </div>\n    <div class="header actions-header">\n\n    </div>\n</div>\n<div class="poll-body">\n    <div class="poll-entry" ng-repeat="participant in event.participants">\n        <form novalidate ng-submit="update(participant); editMode = false">\n            <div class="cell name-cell">\n                <span class="avatar style-{{$index + 1}}">\n                    <img src="/images/user.png" width="11" />\n                </span>\n                <input required autocomplete="off" type="text" class="form-control" ng-model="participant.name" ng-show="editMode" value="participant.name"/>\n                <span ng-hide="editMode" class="name editable" ng-click="editMode = true && !event.isClosed; edit(participant)">{{participant.name}}</span>\n            </div>\n            <div class="cell vote-cell" ng-repeat="date in event.dates">\n                <img src="/images/tick@2x.png"  width="16" ng-hide="editMode" ng-if="participant.dates[$index]" />\n                <img src="/images/nope@2x.png" width="8" ng-hide="editMode" ng-if="!participant.dates[$index]" />\n                <input ng-model="participant.dates[$index]" ng-show="editMode" ng-false-value="false" type="checkbox" />\n                <div class="overlay" ng-show="editMode" ng-click="participant.dates[$index] = !participant.dates[$index]"></div>\n            </div>\n            <div class="cell action-cell" ng-hide="event.isClosed">\n                <button type="button" ng-hide="editMode" ng-click="editMode = true; edit(participant)" class="btn hover">Edit</button>\n                <button type="button" ng-hide="editMode" ng-click="delete(participant)" class="btn danger hover">Delete</button>\n                <button type="submit" ng-show="editMode" class="btn">Save</button>\n                <button type="button" ng-show="editMode" ng-click="editMode = false; cancel($index)" class="btn">Cancel</button>\n            </div>\n        </form>\n    </div>\n    <div class="poll-example" ng-class="{hidden : event.participants.length > 0}">\n        <div class="poll-entry" ng-repeat="example in examples">\n            <div class="cell name-cell">\n                <span class="avatar style-{{$index + 1}}">\n                    <img src="/images/user.png" width="11" />\n                </span>\n                <span class="name">{{example.name}}</span>\n            </div>\n            <div class="cell vote-cell" ng-repeat="date in event.dates">\n                <img src="/images/tick@2x.png"  width="16" ng-if="example.dates[$index]" />\n                <img src="/images/nope@2x.png" width="8" ng-if="!example.dates[$index]" />\n            </div>\n            <div class="cell action-cell">\n\n            </div>\n        </div>\n        <div class="overlay">\n            <div class="overlay-text">\n                Fill in the form below to get started\n            </div>\n        </div>\n    </div>\n    <div ng-hide="event.isClosed" class="poll-entry highlight">\n        <form novalidate name="formnew" ng-submit="save()">\n            <div class="cell name-cell">\n                <span class="avatar style-{{participant.style}}">\n                    <img src="/images/user.png" width="11" />\n                </span>\n                <input autocomplete="off" name="username" type="text" class="form-control" placeholder="Your name..." ng-model="participant.name" required value="participant.name"/>\n            </div>\n            <div class="cell vote-cell" ng-repeat="date in event.dates">\n                <input ng-model="participant.dates[$index]" ng-false-value="false" type="checkbox" />\n                <div class="overlay" ng-click="participant.dates[$index] = !participant.dates[$index]"></div>\n            </div>\n            <div class="cell action-cell">\n                <button type="submit" ng-class="{ \'animated shake\' : formnew.$submitted && formnew.$invalid  }" class="btn">Save</button>\n            </div>\n        </form>\n    </div>\n</div>\n'),e.put("templates/directives/timePicker.html",'<div class="time-picker">\n    <div class="time-picker-col">\n        <div class="daticon">\n            <div class="dow">\n                {{date | date: \'EEE\'}}\n            </div>\n            <div class="day">\n                {{date | date: \'d\'}}\n            </div>\n            <div class="month">\n                {{date | date : \'MMM\'}}\n            </div>\n            <!-- <span class="delete" ng-click="datepicker.unsetDate(date)"></span> -->\n        </div>\n    </div>\n    <div class="time-picker-col" ng-repeat="time in date.times track by $index">\n        <input type="text" class="time-picker-input" time-picker ng-model="time" ng-model-options="{ updateOn: \'blur\' }" />\n    </div>\n</div>\n'),e.put("templates/form/dateForm.html",'<div class="section-details">\n    <div class="section-title">Choose Dates</div>\n    <ul class="daticon-list">\n        <li ng-repeat="d in event.dates">\n            <div class="daticon">\n                <div class="dow">\n                    {{d.date | date: \'EEE\'}}\n                </div>\n                <div class="day">\n                    {{d.date | date: \'d\'}}\n                </div>\n                <div class="month">\n                    {{d.date | date : \'MMM\'}}\n                </div>\n                <span class="delete" ng-click="datepicker.unsetDate(d.date)"></span>\n            </div>\n        </li>\n    </ul>\n</div>\n<div class="section-main">\n    <div class="form-row">\n        <div class="form-group">\n            <label for="email">Calendar</label>\n            <span class="form-error" ng-show="form.$submitted && form.datepicker.$error.required">\n                <img src="/images/error.png" width="14" /> You need to select a few dates\n            </span>\n            <div datepicker required name="datepicker" control="datepicker" ng-model="event.dates">\n\n            </div>\n        </div>\n    </div>\n</div>\n'),e.put("templates/form/eventForm.html",'<div class="section-details">\n    <div class="section-title">Event Details</div>\n</div>\n<div class="section-main">\n    <div class="form-row">\n        <div class="form-col">\n            <div class="form-group">\n                <label for="title">Title</label>\n                <span class="form-error" ng-show="(form.title.$touched || form.$submitted) && errors.title">\n                    <img src="/images/error.png" width="14" /> {{errors.title}}\n                </span>\n                <input id="title" name="title" ng-maxlength="30" required ng-model="event.title" type="text" placeholder="Monthly Meetup..." class="form-control extend"/>\n            </div>\n        </div>\n        <div class="form-col">\n            <div class="form-group optional">\n                <label for="location">Location</label>\n                <span class="form-error" ng-show="(form.location.$touched || form.$submitted) && errors.location">\n                    <img src="/images/error.png" width="14" /> {{errors.location}}\n                </span>\n                <input id="location" name="location" ng-model="event.location" ng-maxlength="50" type="text" placeholder="Rick\'s Cafe..." class="form-control extend"/>\n            </div>\n        </div>\n    </div>\n    <div class="form-row">\n        <div class="form-group optional">\n            <label for="description" >Description</label>\n            <textarea id="description" name="description" ng-model="event.description" placeholder="Enter Description..." class="form-control extend"></textarea>\n        </div>\n    </div>\n</div>\n'),e.put("templates/form/participantsForm.html",'<div class="section-details">\n    <div class="section-title">Invite Participants</div>\n</div>\n<div class="section-main">\n    <div class="form-row">\n        <div class="form-group optional">\n            <label>Participant\'s Emails</label>\n            <tags-input max-length="50" allowed-tags-pattern="{{emailRegex}}" display-property="email" ng-model="event.emails" placeholder="Add an Email" type="email" autocomplete="off"></tags-input>\n            <input type="hidden" name="shouldCreate" value="true" />\n\n        </div>\n    </div>\n</div>\n</section>\n'),e.put("templates/form/settingsForm.html",'<div class="section-details">\n    <div class="section-title">Settings</div>\n</div>\n<div class="section-main">\n    <div class="switch-row">\n        <div class="switch-details">\n            <div class="title">\n                Poll Status\n            </div>\n            <div class="description">\n                Let people vote on the poll.\n            </div>\n        </div>\n        <div class="switch">\n            <div class="switch-value">\n                {{event.isClosed ? \'Closed\' : \'Open\' }}\n            </div>\n            <div switch-toggle ng-model="event.isClosed" invert>\n            </div>\n        </div>\n    </div>\n    <div class="switch-row">\n        <div class="switch-details">\n            <div class="title">\n                Notifications\n            </div>\n            <div class="description">\n                Send email notifications to the creator of this event.\n            </div>\n        </div>\n        <div class="switch">\n            <div class="switch-value">\n                {{event.creator.allowNotifications ? \'Enabled\' : \'Disabled\' }}\n            </div>\n            <div switch-toggle ng-model="event.creator.allowNotifications">\n            </div>\n        </div>\n    </div>\n    <div class="switch-row">\n        <div class="switch-details">\n            <div class="title">\n                Delete Event\n            </div>\n            <div class="description">\n                Once you delete an event it will no longer be accessible.\n            </div>\n        </div>\n        <div class="switch">\n            <button type="button" ng-click="deleteEvent()" class="btn" ng-class="{danger : !deleteRequestSent, disabled : deleteRequestSent}">{{deleteRequestSent ? \'Request Sent\' : \'Delete Event\' }}</button>\n        </div>\n    </div>\n</div>\n</section>\n'),e.put("templates/form/timeForm.html",'<div class="section-details">\n    <div class="section-title">Choose Times</div>\n</div>\n<div class="section-main">\n    <table class="time-form">\n        <thead>\n            <tr>\n                <th>\n\n                </th>\n                <th>\n                    Time 1\n                </th>\n                <th>\n                    Time 2\n                </th>\n                <th>\n                    Time 3\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat="d in event.dates">\n                <td>\n                    <div class="daticon">\n                        <div class="dow">\n                            {{d.date | date: \'EEE\'}}\n                        </div>\n                        <div class="day">\n                            {{d.date | date: \'d\'}}\n                        </div>\n                        <div class="month">\n                            {{d.date | date : \'MMM\'}}\n                        </div>\n                        <span class="delete" ng-click="unsetDate(d.date)"></span>\n                    </div>\n                </td>\n                <td ng-repeat="time in [1,2,3] track by $index">\n                    <input type="text" time-picker ng-model-options="{ updateOn: \'blur\' }" ng-model="d.times[$index]" class="time-picker-input" />\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),e.put("templates/form/userForm.html",'<div class="section-details">\n    <div class="section-title">Your Details</div>\n</div>\n<div class="section-main">\n    <div class="form-row">\n        <div class="form-col">\n            <div class="form-group">\n                <label for="name">Name</label>\n                <span class="form-error" ng-show="(form.name.$touched || form.$submitted) && errors.name">\n                    <img src="/images/error.png" width="14" /> {{errors.name}}\n                </span>\n                <input id="name" name="name" ng-maxlength="30" required ng-model="event.creator.name" type="text" placeholder="John Doe..." class="form-control extend"/>\n            </div>\n        </div>\n        <div class="form-col">\n            <div class="form-group">\n                <label for="email">Email</label>\n                <span class="form-error" ng-show="(form.email.$touched || form.$submitted) && errors.email">\n                    <img src="/images/error.png" width="14" /> {{errors.email}}\n                </span>\n                <input type="email" id="email" name="email" ng-pattern="emailRegex" required ng-model="event.creator.email" placeholder="john.doe@email.com..." class="form-control extend"/>\n            </div>\n        </div>\n    </div>\n</div>\n'),e.put("templates/newEvent/datetime.html",'<section class="box-section" date-form form="form" event="event">\n\n</section>\n\n<div class="box-controls box-bottom-sticky">\n    <button type="button" class="btn" ng-click="prevPage()">Previous</button>\n    <button type="submit" class="btn">Next</button>\n</div>\n'),e.put("templates/newEvent/general.html",'<section class="box-section" user-form form="form" event="event">\n\n</section>\n\n<section class="box-section" event-form form="form" event="event">\n\n</section>\n\n<div class="box-controls box-bottom-sticky">\n    <button type="submit" class="btn">Next Step</button>\n</div>\n'),e.put("templates/newEvent/invite.html",'<section class="box-section" participants-form form="form" event="event">\n\n</section>\n\n<div class="box-controls box-bottom-sticky">\n    <button type="button" class="btn" ng-click="prevPage()">Previous</button>\n    <button type="submit" class="btn">Create</button>\n</div>\n'),e.put("templates/newEvent/layout.html",'<div class="box">\n\n    <div class="box-title">Schedule a New Event</div>\n    <div class="box-description">\n        Fill in the form below to create your event and share it with your friends and colleagues.\n    </div>\n    <ol class="box-steps">\n        <li class="step active">\n            General Details\n        </li>\n        <li class="step" ng-class="{ active : page > 1 }">\n            Dates &amp; Times\n        </li>\n        <li class="step" ng-class="{ active : page > 2 }">\n            Invites\n        </li>\n        <li class="step" ng-class="{ active : page > 3 }">\n            Done\n        </li>\n    </ol>\n    <form novalidate autocomplete="off" name="form" ng-submit="submit()">\n        <div ui-view>\n\n        </div>\n    </form>\n</div>\n'),e.put("templates/newEvent/success.html",'<div class="box-message">\n    <div class="main-image">\n        <img src="/images/success_large.png" width="100" />\n    </div>\n    <div class="title">Event Created</div>\n    <div class="content">\n        Your event has been created successfully! You should receive an email shortly with instructions to verify your email address.\n    </div>\n    <div class="mini-divider">\n    </div>\n    <div class="form-group">\n        <input type="text" class="form-control" disabled="true" value="{{eventUrl}}" />\n        <a href="{{eventUrl}}" class="btn form-btn">GO</a>\n    </div>\n</div>\n')}]),angular.module("rallly").controller("AboutCtrl",["Title",function(e){e.set("About Rallly")}]),angular.module("rallly").controller("AccountCtrl",["$scope","ConfirmModal",function(e){e.showNotice=function(){}}]),angular.module("rallly").controller("DeletionCtrl",["$state","Notification","Event",function(e,t,n){n.destroy({id:e.params.id,code:e.params.code},function(){new t({title:"Event deleted",message:"This event has been deleted",type:"success",timeout:5e3})},function(){new t({title:"Deletion Failed",message:"The event could not be deleted. Make sure that it exists and that the url is correct",type:"error"})}),e.go("event",{id:e.params.id})}]),angular.module("rallly").controller("EditEventCtrl",["$scope","$http","$state","$timeout","Event","ConfirmModal","Notification","Title",function(e,t,n,i,a,o,s,l){var r=n.params.id;e.event=a.get({id:r},function(){l.set("Edit: "+e.event.title),e.master=angular.copy(e.event)},function(){n.go("notfound")}),e.undoChanges=function(){e.event=angular.copy(e.master)},e.didChange=function(){return JSON.stringify(e.master)!=JSON.stringify(e.event)},e.didChangeDates=function(){return JSON.stringify(e.master.dates)!=JSON.stringify(e.event.dates)},e.submit=function(){if(e.form.$valid)if(e.didChangeDates()){new o({title:"Hold up!",message:"Changing the dates will reset all entries by the participants. Are you sure you want to do that?",confirmText:"Yes, I'm sure",isDestructive:!0,confirm:function(){e.event.participants=[],c()}})}else c();else{new s({title:"Not so fast",message:"Make sure you fill in all the required fields and try again.",type:"error"})}};var c=function(){a.update({id:r},e.event,function(){new s({title:"Changes Saved",message:"Your changes have been saved successfully.",type:"success"});e.master=angular.copy(e.event)})}}]),angular.module("rallly").controller("EventCtrl",["$scope","$http","$state","Title","Event","ConfirmModal",function(e,t,n,i,a,o){var s=n.params.id;e.event=a.get({id:s},function(){i.set(e.event.title),e.eventUrl=n.href("event",{id:e.event._id},{absolute:!0})},function(){n.go("notfound")}),e.openEvent=function(){e.event.isClosed=!1,a.update({id:s},e.event,function(){new o({title:"Event Open",message:"People can vote and comment on this event.",cancelText:"OK"})})},e.closeEvent=function(){e.event.isClosed=!0,a.update({id:s},e.event,function(){new o({title:"Event Closed",message:"People can no longer vote or comment on this event.",cancelText:"OK"})})},e.editEvent=function(){n.go("editevent",{id:e.event._id})}}]),angular.module("rallly").controller("HomeCtrl",["$scope","$state","Title",function(e,t,n){n.set("Rallly - Collaborative Scheduling"),e.newEvent=function(){t.go("newevent")}}]),angular.module("rallly").controller("NavigationCtrl",["$scope","$location",function(e,t){e.isActive=function(e){return t.path()==e?!0:!1}}]),angular.module("rallly").controller("NewEventCtrl",["$scope","$http","$state","Event","ConfirmModal","Notification",function(e,t,n,i,a){e.title="Schedule a New Event",e.description="Fill in the form below to create your event and share it with your friends and colleagues.",e.event={};var o=["newevent.general","newevent.datetime","newevent.invite"];e.page=1;var s=function(t){e.page=t,n.go(o[t-1])};s(e.page),e.submit=function(){e.form.$valid&&e.page==o.length?t.post("/api/event",e.event).success(function(t){e.event=t,e.eventUrl=n.href("event",{id:e.event._id},{absolute:!0}),e.page++,n.go("newevent.success")}).error(function(){new a({title:"Uh oh!",message:"There was an error creating your event. Please try again later.",cancelText:"OK"})}):e.form.$valid&&(e.form.$setPristine(),e.nextPage())},e.nextPage=function(){s(e.page+1)},e.prevPage=function(){s(e.page-1)}}]),angular.module("rallly").controller("VerificationCtrl",["Event","Notification","$state",function(e,t,n){e.verify({id:n.params.id,code:n.params.code},function(){new t({title:"Email Verified",message:"Your email has been verified. You will now be able to receive email notifications for this event",type:"success",timeout:5e3})},function(){new t({title:"Verification Failed",message:"Your verification code has expired.",type:"error"})}),n.go("event",{id:n.params.id})}]),angular.module("rallly").directive("backImg",function(){return function(e,t,n){var i=n.backImg;t.css({"background-image":"url(/images/"+i+".png)"})}}),angular.module("rallly").directive("datepicker",["DatePickerService",function(e){return{restrict:"A",require:"ngModel",scope:{model:"=ngModel",control:"="},link:function(t,n,i,a){var o=new e(t.model),s=o.getDatesArray();angular.element(n).datepicker({multidate:!0,todayHighlight:!0}).on("changeDate",function(e){var t=e.dates;if(t.length>s.length){var n=t[t.length-1];o.addDate(n)}else{var i=o.diffDates(s,t);i&&o.removeDate(i)}a.$setViewValue(o.getDates()),s=t}),t.control=t.control||{},t.$watchCollection("model",function(){var e=angular.element(n).datepicker("getDates"),t=o.getDatesArray();e.length!=t.length&&angular.element(n).datepicker("setDates",t)}),t.control.unsetDate=function(e){o.removeDate(e)},a.$validators.required=function(e){return e&&0!=e.length?!0:!1}}}}]).service("DatePickerService",function(){return function(e){var t=e||[];this.addDate=function(e){t.push({date:e}),t.sort(function(e,t){return Date.compare(e.date,t.date)>0?!0:!1})},this.removeDate=function(e){for(var n=0;n<t.length;n++)Date.equals(t[n].date,e)&&t.splice(n,1)
},this.getDates=function(){return t.length>0?t:null},this.getDatesArray=function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n].date);return e},this.diffDates=function(e,t){for(var n=!0,i=0;i<e.length;i++){n=!0;for(var a=0;a<t.length;a++)Date.equals(e[i],t[a])&&(n=!1);if(n)return e[i]}}}}),angular.module("rallly").directive("discussion",["$timeout","Comment","ConfirmModal",function(e,t,n){return{restrict:"A",templateUrl:"templates/directives/discussion.html",scope:{event:"="},link:function(i){i.comment={};var a=angular.element(".comment-thread");e(function(){a.scrollTop(a.prop("scrollHeight"))}),i.deleteComment=function(e){new n({title:"Are you sure?",message:"Are you sure you want to remove this comment?",confirmText:"Yes - delete",cancelText:"No - nevermind",isDestructive:!0,confirm:function(){t.remove({id:i.event._id,cid:e._id},function(e){i.event=e})}})},i.postComment=function(){if(i.commentForm.$valid){var e=new t(i.comment);e.$save({id:i.event._id},function(e){i.event=e,i.comment={}}),i.commentForm.$setPristine()}}}}}]),angular.module("rallly").directive("dropdown",["$document",function(e){return{restrict:"A",link:function(t,n){n.addClass("dropdown"),t.open=!1;var i=function(e){var i=n.find(e.target).length>0;i||t.toggle()};t.toggle=function(){t.open=!t.open,t.open?(n.addClass("open"),e.bind("click",i)):(n.removeClass("open"),e.unbind("click",i))}}}}]),angular.module("rallly").service("FormHelper",function(){this.emailRegexString="^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$",this.emailRegex=new RegExp(this.emailRegexString),this.prettyError=function(e,t){return e.required?t+" is required":e.pattern?t+" is invalid":e.maxlength?t+" is too long":!1}}).directive("userForm",["FormHelper",function(e){return{scope:{event:"=",form:"="},templateUrl:"templates/form/userForm.html",link:function(t){t.errors={},t.emailRegex=e.emailRegex,t.$watchCollection("form.name.$error",function(n){t.errors.name=e.prettyError(n,"Name")}),t.$watchCollection("form.email.$error",function(n){t.errors.email=e.prettyError(n,"Email")})}}}]).directive("eventForm",["FormHelper",function(e){return{scope:{event:"=",form:"="},templateUrl:"templates/form/eventForm.html",link:function(t){t.errors={},t.$watchCollection("form.title.$error",function(n){t.errors.title=e.prettyError(n,"Title")}),t.$watchCollection("form.location.$error",function(n){t.errors.location=e.prettyError(n,"Location")})}}}]).directive("dateForm",function(){return{scope:{event:"=",form:"="},templateUrl:"templates/form/dateForm.html"}}).directive("participantsForm",["FormHelper",function(e){return{scope:{event:"=",form:"="},templateUrl:"templates/form/participantsForm.html",link:function(t){t.emailRegex=e.emailRegexString}}}]).directive("settingsForm",["Event","ConfirmModal",function(e,t){return{scope:{event:"=",form:"="},templateUrl:"templates/form/settingsForm.html",link:function(n){n.deleteEvent=function(){n.deleteRequestSent||e.delete({id:n.event._id},function(){n.deleteRequestSent=!0;new t({title:"Delete Request Sent",message:"An email has been sent to the creator of this event with instructions to delete it.",cancelText:"OK"})})}}}}]).directive("switchToggle",function(){return{scope:{model:"=ngModel"},require:"ngModel",link:function(e,t,n,i){t.addClass("switch-toggle");var a=function(){e.model^"undefined"!=typeof n.invert?t.addClass("active"):t.removeClass("active")};e.$watch("model",a),t.bind("click",function(t){e.model=!e.model,i.$setViewValue(e.model,t)})}}}).directive("timeForm",["DatePickerService",function(e){return{scope:{event:"=",form:"="},templateUrl:"templates/form/timeForm.html",link:function(t){var n,i=!1,a=t.$watch("event.dates",function(o){o&&!i&&a(),i=!0,n=new e(t.event.dates),t.unsetDate=function(e){n.removeDate(e)}})}}}]).directive("timePicker",["$timeout",function(){return{scope:{model:"=ngModel"},require:"ngModel",link:function(e,t,n,i){i.$viewChangeListeners.push(function(){e.model=i.$modelValue}),i.$parsers.push(function(e){return e?Date.parse(e):void 0}),i.$validators.time=function(e){if(i.$isEmpty(e))return!0;var t=Date.parse(e);return t?(i.$setViewValue(t.toString("hh:mm tt")),i.$render(),!0):!1}}}}]),angular.module("rallly").directive("poll",["$timeout","Participant","ConfirmModal",function(e,t,n){return{restrict:"A",templateUrl:"templates/directives/poll.html",scope:{event:"="},link:function(e){e.defaults=[],e.participant={};var i=[];e.event.$promise.then(function(t){for(var n=["John Example","Jane Specimen","Mark Instance","Mary Case"],i=[],a=0;a<n.length;a++){var o={name:n[a]};o.dates=[];for(var s=0;s<t.dates.length;s++){var l=Math.random()<.5;o.dates[s]=l}i.push(o)}e.examples=i}),e.delete=function(i){new n({title:"Delete "+i.name+"?",message:"Are you sure you want to remove "+i.name+" from the poll?",confirmText:"Yes - delete",cancelText:"No - nevermind",isDestructive:!0,confirm:function(){t.remove({id:e.event._id,pid:i._id},function(t){e.event=t})}})},e.isTopDate=function(e){for(var t=i[e],n=0;n<i.length;n++)if(i[n]>t)return!1;return!0},e.selectedDate=function(t){i[t]=0;for(var n=0;n<e.event.participants.length;n++)e.event.participants[n].dates[t]&&i[t]++;return i[t]},e.update=function(n){t.update({id:e.event._id,pid:n._id},n)},e.edit=function(t){e.defaults[e.event.participants.indexOf(t)]=angular.copy(t)},e.cancel=function(t){e.event.participants[t]=e.defaults[t]},e.save=function(){if(e.formnew.$valid){var n=new t(e.participant);n.$save({id:e.event._id},function(t){e.event=t,e.participant={}}),e.formnew.$setPristine()}}}}}]),angular.module("rallly").filter("elapsed",["$filter",function(e){return function(t){if(t){var n=Date.parse(t),i=(new Date).getTime(),a=i-n,o=Math.floor(a/1e3),s=Math.floor(o/60),l=Math.floor(s/60),r=Math.floor(l/24);return r>30?"on "+e("date")(t,"MMMM d"):r>1?r+" days ago":1==r?"1 day ago":l>1?l+" hours ago":1==l?"an hour ago":s>1?s+" minutes ago":1==s?"a minute ago":"a few seconds ago"}}}]),angular.module("rallly").factory("ConfirmModal",["btfModal",function(e){return function(t){var n;n=e({templateUrl:"templates/confirmmodal.html",controllerAs:"modal",controller:function(){this.title=t.title,this.message=t.message,this.confirm=t.confirm?function(){t.confirm(),n.deactivate()}:!1,this.cancel=n.deactivate,this.confirmText=t.confirmText||"Confirm",this.cancelText=t.cancelText||"Cancel",this.isDestructive=t.isDestructive}}),n.activate(),this.destroy=function(){n.deactivate()}}}]),angular.module("rallly").factory("Notification",["$timeout","btfModal",function(e,t){return function(n){var i;i=t({templateUrl:"templates/notification.html",controllerAs:"notification",controller:function(){this.title=n.title,this.message=n.message,this.close=i.deactivate,this.type=n.type;var t=n.timeout||5e3;e(i.deactivate,t)}}),i.activate(),this.destroy=function(){i.deactivate()}}}]);
//# sourceMappingURL=data:application/json;base64,