angular.module("rallly",["ui.router","ngResource","ngFx"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(t,e,n){n.html5Mode(!0),e.otherwise("/notfound"),t.state("index",{url:"/",templateUrl:"templates/new.html",controller:"NewEventCtrl"}).state("about",{url:"/about",templateUrl:"templates/about.html"}).state("notfound",{url:"/notfound",templateUrl:"templates/notfound.html"}).state("event",{url:"/:id",templateUrl:"templates/event.html",controller:"EventCtrl"})}]).factory("Event",["$resource",function(t){return t("/api/event/:id",{id:"@_id"},{update:{method:"PUT"}})}]).factory("Participant",["$resource",function(t){return t("/api/event/:id/participant/:pid",{id:"@_id",pid:"@pid"})}]),angular.module("rallly").controller("EventCtrl",["$scope","$http","$state","Event","Participant",function(t,e,n,r,i){var o=n.params.id;t.event=r.get({id:o}),t.deleteParticipant=function(e){confirm("Are you sure you want to remove "+e.name+"?")&&i.remove({id:o,pid:e._id},function(e){t.event=e})},t.edit=function(){},t.update=function(){r.update({_id:t.event.id},t.event)},t.save=function(e){var e=new i(e);e.$save({id:o},function(e){t.event=e,t.participant={}})}}]),angular.module("rallly").controller("NewEventCtrl",["$scope","$http","$state",function(t,e,n){t.event={},t.submit=function(){e.post("/api/event",t.event).success(function(e){t.event=e,t.eventUrl=n.href("event",{id:t.event._id},{absolute:!0})}).error(function(e){t.errors=e.errors})},t.clearDates=null}]).directive("datepicker",function(){return{restrict:"A",require:"ngModel",link:function(t,e,n,r){$(e).datepicker({multidate:!0,todayHighlight:!0,format:"dd/mm/yyyy"}).on("changeDate",function(t){var e=t.dates;e.sort(function(t,e){return t.getTime()>e.getTime()?!0:!1}),r.$setViewValue(e,t)}),t.clearDates=function(){$(e).datepicker("setDate",null)},t.unsetDate=function(n){$(e).datepicker("setDates",t.event.dates.filter(function(t){return t!=n}))}}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJjb250cm9sbGVycy9ldmVudC5jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbmV3ZXZlbnQuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFBLE9BQUEsVUFBQSxZQUFBLGFBQUEsU0FDQSxRQUFBLGlCQUFBLHFCQUFBLG9CQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxXQUFBLEdBQ0EsRUFBQSxVQUFBLGFBQ0EsRUFDQSxNQUFBLFNBQ0EsSUFBQSxJQUNBLFlBQUEscUJBQ0EsV0FBQSxpQkFFQSxNQUFBLFNBQ0EsSUFBQSxTQUNBLFlBQUEseUJBRUEsTUFBQSxZQUNBLElBQUEsWUFDQSxZQUFBLDRCQUVBLE1BQUEsU0FDQSxJQUFBLE9BQ0EsWUFBQSx1QkFDQSxXQUFBLGlCQUdBLFFBQUEsU0FBQSxZQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsa0JBQUEsR0FBQSxTQUNBLFFBQUEsT0FBQSxZQUdBLFFBQUEsZUFBQSxZQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsbUNBQUEsR0FBQSxPQUFBLElBQUEsWUM5QkEsUUFBQSxPQUFBLFVBQ0EsV0FBQSxhQUFBLFNBQUEsUUFBQSxTQUFBLFFBQUEsY0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxPQUFBLEVBQ0EsR0FBQSxNQUFBLEVBQUEsS0FBQSxHQUFBLElBQ0EsRUFBQSxrQkFBQSxTQUFBLEdBQ0EsUUFBQSxtQ0FBQSxFQUFBLEtBQUEsTUFDQSxFQUFBLFFBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsS0FJQSxFQUFBLEtBQUEsYUFJQSxFQUFBLE9BQUEsV0FDQSxFQUFBLFFBQUEsSUFBQSxFQUFBLE1BQUEsSUFBQSxFQUFBLFFBR0EsRUFBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEVBQ0EsR0FBQSxPQUFBLEdBQUEsR0FBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxxQkN2QkEsUUFBQSxPQUFBLFVBQ0EsV0FBQSxnQkFBQSxTQUFBLFFBQUEsU0FBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsU0FDQSxFQUFBLE9BQUEsV0FDQSxFQUFBLEtBQUEsYUFBQSxFQUFBLE9BQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxTQUFBLEVBQUEsS0FBQSxTQUNBLEdBQUEsRUFBQSxNQUFBLE1BRUEsVUFBQSxNQUlBLE1BQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLFVBR0EsRUFBQSxXQUFBLFFBRUEsVUFBQSxhQUFBLFdBQ0EsT0FDQSxTQUFBLElBQ0EsUUFBQSxVQUNBLEtBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsR0FBQSxZQUNBLFdBQUEsRUFDQSxnQkFBQSxFQUNBLE9BQUEsZUFFQSxHQUFBLGFBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLEtBQ0EsR0FBQSxLQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxVQUFBLEVBQUEsV0FBQSxHQUNBLElBRUEsRUFBQSxjQUFBLEVBQUEsS0FHQSxFQUFBLFdBQUEsV0FDQSxFQUFBLEdBQUEsV0FBQSxVQUFBLE9BRUEsRUFBQSxVQUFBLFNBQUEsR0FDQSxFQUFBLEdBQUEsV0FBQSxXQUFBLEVBQUEsTUFBQSxNQUFBLE9BQUEsU0FBQSxHQUNBLE1BQUEsSUFBQSIsImZpbGUiOiJwdWJsaWMvYnVpbGQvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3JhbGxseScsIFsndWkucm91dGVyJywnbmdSZXNvdXJjZScsJ25nRngnXSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKXtcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL25vdGZvdW5kXCIpXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgIC5zdGF0ZSgnaW5kZXgnLHtcbiAgICAgICAgICAgIHVybCA6ICcvJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogJ3RlbXBsYXRlcy9uZXcuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyIDogJ05ld0V2ZW50Q3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdhYm91dCcsIHtcbiAgICAgICAgICAgIHVybCA6ICcvYWJvdXQnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiAndGVtcGxhdGVzL2Fib3V0Lmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnbm90Zm91bmQnLCB7XG4gICAgICAgICAgICB1cmwgOiAnL25vdGZvdW5kJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogJ3RlbXBsYXRlcy9ub3Rmb3VuZC5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2V2ZW50Jyx7XG4gICAgICAgICAgICB1cmwgOiAnLzppZCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6ICd0ZW1wbGF0ZXMvZXZlbnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyIDogJ0V2ZW50Q3RybCdcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIC5mYWN0b3J5KCdFdmVudCcsIGZ1bmN0aW9uKCRyZXNvdXJjZSl7XG4gICAgICAgIHJldHVybiAkcmVzb3VyY2UoJy9hcGkvZXZlbnQvOmlkJywgeyBpZCA6ICdAX2lkJyB9LCB7XG4gICAgICAgICAgICAndXBkYXRlJyA6IHsgbWV0aG9kIDogJ1BVVCcgfVxuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC5mYWN0b3J5KCdQYXJ0aWNpcGFudCcsIGZ1bmN0aW9uKCRyZXNvdXJjZSl7XG4gICAgICAgIHJldHVybiAkcmVzb3VyY2UoJy9hcGkvZXZlbnQvOmlkL3BhcnRpY2lwYW50LzpwaWQnLCB7IGlkOiAnQF9pZCcsIHBpZCA6ICdAcGlkJ30pO1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3JhbGxseScpXG4uY29udHJvbGxlcignRXZlbnRDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHN0YXRlLCBFdmVudCwgUGFydGljaXBhbnQpe1xuICAgIHZhciBpZCA9ICRzdGF0ZS5wYXJhbXMuaWQ7XG4gICAgJHNjb3BlLmV2ZW50ID0gRXZlbnQuZ2V0KHtpZDppZH0pO1xuICAgICRzY29wZS5kZWxldGVQYXJ0aWNpcGFudCA9IGZ1bmN0aW9uKHBhcnRpY2lwYW50KXtcbiAgICAgICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIFwiK3BhcnRpY2lwYW50Lm5hbWUrXCI/XCIpKXtcbiAgICAgICAgICAgIFBhcnRpY2lwYW50LnJlbW92ZSh7IGlkIDogaWQgLCBwaWQgOiBwYXJ0aWNpcGFudC5faWQgfSwgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgJHNjb3BlLmVkaXQgPSBmdW5jdGlvbihpbmRleCl7XG5cbiAgICB9XG5cbiAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24ocGFydGljaXBhbnQpe1xuICAgICAgICBFdmVudC51cGRhdGUoeydfaWQnOiRzY29wZS5ldmVudC5pZH0sICRzY29wZS5ldmVudCk7XG4gICAgfVxuXG4gICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbihwYXJ0aWNpcGFudCl7XG4gICAgICAgIHZhciBwYXJ0aWNpcGFudCA9IG5ldyBQYXJ0aWNpcGFudChwYXJ0aWNpcGFudCk7XG4gICAgICAgIHBhcnRpY2lwYW50LiRzYXZlKHtpZDppZH0sIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgICRzY29wZS5ldmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgJHNjb3BlLnBhcnRpY2lwYW50ID0ge307XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3JhbGxseScpXG4uY29udHJvbGxlcignTmV3RXZlbnRDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHN0YXRlKXtcbiAgICAkc2NvcGUuZXZlbnQgPSB7fTtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaS9ldmVudCcsICRzY29wZS5ldmVudClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZXZlbnQsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKXtcbiAgICAgICAgICAgICRzY29wZS5ldmVudCA9IGV2ZW50O1xuICAgICAgICAgICAgJHNjb3BlLmV2ZW50VXJsID0gJHN0YXRlLmhyZWYoJ2V2ZW50Jywge1xuICAgICAgICAgICAgICAgIGlkOiAkc2NvcGUuZXZlbnQuX2lkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgYWJzb2x1dGUgOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vICRzdGF0ZS5nbygnZXZlbnQnLHtpZCA6IGRhdGEuZXZlbnQuX2lkfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZyl7XG4gICAgICAgICAgICAkc2NvcGUuZXJyb3JzID0gZGF0YS5lcnJvcnM7XG4gICAgICAgIH0pXG4gICAgfVxuICAgICRzY29wZS5jbGVhckRhdGVzID0gbnVsbFxufSlcbi5kaXJlY3RpdmUoJ2RhdGVwaWNrZXInLCBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0IDogJ0EnLFxuICAgICAgICByZXF1aXJlIDogJ25nTW9kZWwnLFxuICAgICAgICBsaW5rIDogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRycywgbmdNb2RlbCl7XG4gICAgICAgICAgICAkKGVsKS5kYXRlcGlja2VyKHtcbiAgICAgICAgICAgICAgICBtdWx0aWRhdGUgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvZGF5SGlnaGxpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGZvcm1hdCA6ICdkZC9tbS95eXl5J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignY2hhbmdlRGF0ZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIHZhciBkYXRlcyA9IGUuZGF0ZXM7XG4gICAgICAgICAgICAgICAgZGF0ZXMuc29ydChmdW5jdGlvbihhLCBiKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEuZ2V0VGltZSgpID4gYi5nZXRUaW1lKCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGRhdGVzLCBlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZS5jbGVhckRhdGVzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKGVsKS5kYXRlcGlja2VyKCdzZXREYXRlJywgbnVsbClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY29wZS51bnNldERhdGUgPSBmdW5jdGlvbihkYXRlKXtcbiAgICAgICAgICAgICAgICAkKGVsKS5kYXRlcGlja2VyKCdzZXREYXRlcycsIHNjb3BlLmV2ZW50LmRhdGVzLmZpbHRlcihmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbCAhPSBkYXRlO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==