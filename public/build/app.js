angular.module("rallly",["ui.router","ngResource","ngFx","btford.modal"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){n.html5Mode(!0),t.otherwise("/notfound"),e.state("index",{url:"/",templateUrl:"templates/home.html",controller:"HomeCtrl"}).state("newevent",{url:"/new",templateUrl:"templates/newevent.html",controller:"NewEventCtrl"}).state("about",{url:"/about",templateUrl:"templates/about.html",controller:"AboutCtrl"}).state("notfound",{url:"/notfound",templateUrl:"templates/notfound.html"}).state("editevent",{url:"/:id/edit",templateUrl:"templates/editevent.html",controller:"EditEventCtrl"}).state("event",{url:"/:id",templateUrl:"templates/event.html",controller:"EventCtrl"})}]).factory("Event",["$resource",function(e){return e("/api/event/:id",{id:"@_id"},{update:{method:"PUT"}})}]).factory("Participant",["$resource",function(e){return e("/api/event/:id/participant/:pid",{id:"@_id",pid:"@pid"},{update:{method:"PUT"}})}]),angular.module("rallly").controller("AboutCtrl",function(){$(".nav-link").removeClass("active"),$(".nav-link[href='/about']").addClass("active")}),angular.module("rallly").controller("EditEventCtrl",["$scope","$http","$state","$timeout","Event","ConfirmModal",function(e,t,n,a,r,i){var o=n.params.id;e.event=r.get({id:o},function(t){for(var n=[],a=0;a<t.dates.length;a++)n.push(new Date(t.dates[a]));$("[data-datepicker]").datepicker("setDates",n),e.master=angular.copy(e.event)},function(){n.go("notfound")}),e.didChange=function(){return JSON.stringify(e.master)!=JSON.stringify(e.event)},e.didChangeDates=function(){return JSON.stringify(e.master.dates)!=JSON.stringify(e.event.dates)},e.submit=function(){if(e.didChange())if(e.didChangeDates()){var t=new i({title:"Hold up!",message:"Changing the dates will reset all entries by the participants. Are you sure you want to do that?",confirmText:"Yes, I'm sure",isDestructive:!0,confirm:function(){l()}});t.show()}else l()};var l=function(){r.update({id:o},e.event,function(){a.cancel(e.didSave),e.master=angular.copy(e.event),e.didSave=a(function(){e.didSave=!1},2e3)})}}]),angular.module("rallly").controller("EventCtrl",["$scope","$http","$state","Event","Participant","ConfirmModal",function(e,t,n,a,r,i){$(".nav-link").removeClass("active");var o=n.params.id;e.participant={},e.event=a.get({id:o},function(){e.eventUrl=n.href("event",{id:e.event._id},{absolute:!0})},function(){n.go("notfound")}),e.delete=function(t){var n=new i({title:'Delete "'+t.name+'"?',message:"Are you sure you want to remove "+t.name+" from the poll?",confirmText:"Yes - delete",cancelText:"No - nevermind",isDestructive:!0,confirm:function(){r.remove({id:o,pid:t._id},function(t){e.event=t})}});n.show()},e.defaults=[],e.editEvent=function(){n.go("editevent",{id:e.event._id})},e.update=function(t){r.update({id:e.event._id,pid:t._id},t)},e.edit=function(t){e.defaults[e.event.participants.indexOf(t)]=angular.copy(t)},e.cancel=function(t){e.event.participants[t]=e.defaults[t]},e.save=function(t){var t=new r(t);t.$save({id:o},function(t){e.event=t,e.participant={}})}}]).controller("DeleteModalCtrl",function(){}),angular.module("rallly").controller("HomeCtrl",["$scope","$state",function(e,t){e.newEvent=function(){t.go("newevent")}}]),angular.module("rallly").controller("NavigationCtrl",["$scope","$location",function(e,t){e.isActive=function(e){return t.path()==e?!0:!1}}]),angular.module("rallly").controller("NewEventCtrl",["$scope","$http","$state","Event",function(e,t,n){$(".nav-link").removeClass("active"),$(".nav-link[href='/']").addClass("active"),e.submit=function(){t.post("/api/event",e.event).success(function(t){e.event=t,e.eventUrl=n.href("event",{id:e.event._id},{absolute:!0})}).error(function(t){e.errors=t.errors})},e.clearDates=null}]).directive("datepicker",function(){return{restrict:"A",require:"ngModel",link:function(e,t,n,a){angular.element(t).datepicker({multidate:!0,todayHighlight:!0,format:"dd/mm/yyyy"}).on("changeDate",function(e){var t=e.dates;t.sort(function(e,t){return e.getTime()>t.getTime()?!0:!1}),a.$setViewValue(t,e)}),e.clearDates=function(){angular.element(t).datepicker("setDate",null)},e.unsetDate=function(n){angular.element(t).datepicker("setDates",e.event.dates.filter(function(e){return e!=n}))}}}}),angular.module("rallly").directive("backImg",function(){return function(e,t,n){var a=n.backImg;t.css({"background-image":"url(/images/"+a+".png)"})}}),angular.module("rallly").filter("elapsed",["$filter",function(e){return function(t){if(t){var n=Date.parse(t),a=(new Date).getTime(),r=a-n,i=Math.floor(r/1e3),o=Math.floor(i/60),l=Math.floor(o/60),u=Math.floor(l/24);return u>30?"on "+e("date")(t,"MMMM d"):u>1?u+" days ago":1==u?"1 day ago":l>1?l+" hours ago":1==l?"an hour ago":o>1?o+" minutes ago":1==o?"a minute ago":"a few seconds ago"}}}]),angular.module("rallly").factory("ConfirmModal",["btfModal",function(e){return function(t){var n;n=e({templateUrl:"templates/confirmmodal.html",controllerAs:"modal",controller:function(){this.title=t.title,this.message=t.message,this.confirm=function(){t.confirm&&t.confirm(),n.deactivate()},this.cancel=n.deactivate,this.confirmText=t.confirmText||"Confirm",this.cancelText=t.cancelText||"Cancel",this.isDestructive=t.isDestructive}}),this.show=function(){n.activate()},this.destroy=function(){n.deactivate()}}}]);
//# sourceMappingURL=data:application/json;base64,