angular.module("rallly",["ui.router","ngResource","ngFx"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,n){n.html5Mode(!0),t.otherwise("/notfound"),e.state("index",{url:"/",templateUrl:"templates/newevent.html",controller:"NewEventCtrl"}).state("about",{url:"/about",templateUrl:"templates/about.html"}).state("notfound",{url:"/notfound",templateUrl:"templates/notfound.html"}).state("editevent",{url:"/:id/edit",templateUrl:"templates/editevent.html",controller:"EditEventCtrl"}).state("event",{url:"/:id",templateUrl:"templates/event.html",controller:"EventCtrl"})}]).factory("Event",["$resource",function(e){return e("/api/event/:id",{id:"@_id"},{update:{method:"PUT"}})}]).factory("Participant",["$resource",function(e){return e("/api/event/:id/participant/:pid",{id:"@_id",pid:"@pid"},{update:{method:"PUT"}})}]),angular.module("rallly").controller("EditEventCtrl",["$scope","$http","$state","$timeout","Event",function(e,t,n,i,a){var r=n.params.id;e.event=a.get({id:r},function(t){for(var n=[],i=0;i<t.dates.length;i++)n.push(new Date(t.dates[i]));$("[data-datepicker]").datepicker("setDates",n),e.master=angular.copy(e.event)},function(){n.go("notfound")}),e.didChange=function(){return JSON.stringify(e.master)!=JSON.stringify(e.event)},e.didChangeDates=function(){return JSON.stringify(e.master.dates)!=JSON.stringify(e.event.dates)},e.submit=function(){e.didChange()&&(e.didChangeDates()?confirm("Changing the dates will reset all entries by the participants. Are you sure you want to proceed?")&&o():o())};var o=function(){e.event.participants=[],a.update({id:r},e.event,function(){i.cancel(e.didSave),e.master=angular.copy(e.event),e.didSave=i(function(){e.didSave=!1},2e3)})}}]),angular.module("rallly").controller("EventCtrl",["$scope","$http","$state","Event","Participant",function(e,t,n,i,a){$(".nav-link").removeClass("active");var r=n.params.id;e.event=i.get({id:r},function(){e.eventUrl=n.href("event",{id:e.event._id},{absolute:!0})},function(){n.go("notfound")}),e.delete=function(t){confirm("Are you sure you want to remove "+t.name+"?")&&a.remove({id:r,pid:t._id},function(t){e.event=t})},e.defaults=[],e.editEvent=function(){n.go("editevent",{id:e.event._id})},e.update=function(t){a.update({id:e.event._id,pid:t._id},t)},e.edit=function(t){e.defaults[e.event.participants.indexOf(t)]=angular.copy(t)},e.cancel=function(t){e.event.participants[t]=e.defaults[t]},e.save=function(t){var t=new a(t);t.$save({id:r},function(t){e.event=t,e.participant={}})}}]),angular.module("rallly").controller("NewEventCtrl",["$scope","$http","$state","Event",function(e,t,n){$(".nav-link[href='/']").addClass("active"),e.submit=function(){t.post("/api/event",e.event).success(function(t){e.event=t,e.eventUrl=n.href("event",{id:e.event._id},{absolute:!0})}).error(function(t){e.errors=t.errors})},e.clearDates=null}]).directive("datepicker",function(){return{restrict:"A",require:"ngModel",link:function(e,t,n,i){$(t).datepicker({multidate:!0,todayHighlight:!0,format:"dd/mm/yyyy"}).on("changeDate",function(e){var t=e.dates;t.sort(function(e,t){return e.getTime()>t.getTime()?!0:!1}),i.$setViewValue(t,e)}),e.clearDates=function(){$(t).datepicker("setDate",null)},e.unsetDate=function(n){$(t).datepicker("setDates",e.event.dates.filter(function(e){return e!=n}))}}}});
//# sourceMappingURL=data:application/json;base64,