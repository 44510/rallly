angular.module("rallly",["ui.router","ngResource","ngFx"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(t,e,n){n.html5Mode(!0),e.otherwise("/notfound"),t.state("index",{url:"/",templateUrl:"templates/newevent.html",controller:"NewEventCtrl"}).state("about",{url:"/about",templateUrl:"templates/about.html",controller:"AboutCtrl"}).state("notfound",{url:"/notfound",templateUrl:"templates/notfound.html"}).state("editevent",{url:"/:id/edit",templateUrl:"templates/editevent.html",controller:"EditEventCtrl"}).state("event",{url:"/:id",templateUrl:"templates/event.html",controller:"EventCtrl"})}]).factory("Event",["$resource",function(t){return t("/api/event/:id",{id:"@_id"},{update:{method:"PUT"}})}]).factory("Participant",["$resource",function(t){return t("/api/event/:id/participant/:pid",{id:"@_id",pid:"@pid"},{update:{method:"PUT"}})}]),angular.module("rallly").controller("AboutCtrl",function(){$(".nav-link").removeClass("active"),$(".nav-link[href='/about']").addClass("active")}),angular.module("rallly").controller("EditEventCtrl",["$scope","$http","$state","$timeout","Event",function(t,e,n,a,i){var r=n.params.id;t.event=i.get({id:r},function(e){for(var n=[],a=0;a<e.dates.length;a++)n.push(new Date(e.dates[a]));$("[data-datepicker]").datepicker("setDates",n),t.master=angular.copy(t.event)},function(){n.go("notfound")}),t.didChange=function(){return JSON.stringify(t.master)!=JSON.stringify(t.event)},t.didChangeDates=function(){return JSON.stringify(t.master.dates)!=JSON.stringify(t.event.dates)},t.submit=function(){t.didChange()&&(t.didChangeDates()?confirm("Changing the dates will reset all entries by the participants. Are you sure you want to proceed?")&&o():o())};var o=function(){t.event.participants=[],i.update({id:r},t.event,function(){a.cancel(t.didSave),t.master=angular.copy(t.event),t.didSave=a(function(){t.didSave=!1},2e3)})}}]),angular.module("rallly").controller("EventCtrl",["$scope","$http","$state","Event","Participant",function(t,e,n,a,i){$(".nav-link").removeClass("active");var r=n.params.id;t.participant={},t.event=a.get({id:r},function(){t.eventUrl=n.href("event",{id:t.event._id},{absolute:!0})},function(){n.go("notfound")}),t.delete=function(e){confirm("Are you sure you want to remove "+e.name+"?")&&i.remove({id:r,pid:e._id},function(e){t.event=e})},t.defaults=[],t.editEvent=function(){n.go("editevent",{id:t.event._id})},t.update=function(e){i.update({id:t.event._id,pid:e._id},e)},t.edit=function(e){t.defaults[t.event.participants.indexOf(e)]=angular.copy(e)},t.cancel=function(e){t.event.participants[e]=t.defaults[e]},t.save=function(e){var e=new i(e);e.$save({id:r},function(e){t.event=e,t.participant={}})}}]),angular.module("rallly").controller("NewEventCtrl",["$scope","$http","$state","Event",function(t,e,n){$(".nav-link").removeClass("active"),$(".nav-link[href='/']").addClass("active"),t.submit=function(){e.post("/api/event",t.event).success(function(e){t.event=e,t.eventUrl=n.href("event",{id:t.event._id},{absolute:!0})}).error(function(e){t.errors=e.errors})},t.clearDates=null}]).directive("datepicker",function(){return{restrict:"A",require:"ngModel",link:function(t,e,n,a){$(e).datepicker({multidate:!0,todayHighlight:!0,format:"dd/mm/yyyy"}).on("changeDate",function(t){var e=t.dates;e.sort(function(t,e){return t.getTime()>e.getTime()?!0:!1}),a.$setViewValue(e,t)}),t.clearDates=function(){$(e).datepicker("setDate",null)},t.unsetDate=function(n){$(e).datepicker("setDates",t.event.dates.filter(function(t){return t!=n}))}}}});
//# sourceMappingURL=data:application/json;base64,